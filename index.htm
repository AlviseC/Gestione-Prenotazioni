<!DOCTYPE html>
<html lang="it">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Prenotazione Auto Aziendali</title>

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />

    <!-- Icone: Phosphor Icons -->
    <script src="https://unpkg.com/@phosphor-icons/web"></script>

    <style>
      /* Stile di base con il font Inter */
      body {
        font-family: "Inter", sans-serif;
      }
      /* Stile per l'effetto di selezione */
      .car-card.selected {
        outline: 3px solid #3b82f6; /* blue-500 */
        box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1),
          0 4px 6px -4px rgb(0 0 0 / 0.1);
      }
      /* Stile per la transizione fluida */
      .car-card {
        transition: all 0.2s ease-in-out;
      }
      /* Nasconde le frecce dell'input numerico/data */
      input[type="date"]::-webkit-calendar-picker-indicator {
        cursor: pointer;
      }
      /* Stile per il pulsante di cancellazione */
      .delete-btn {
        opacity: 0.5;
        transition: opacity 0.2s ease-in-out;
      }
      .delete-btn:hover {
        opacity: 1;
        color: #ef4444; /* red-500 */
      }
    </style>
  </head>
  <body class="bg-gray-50 text-gray-800">
    <div class="container mx-auto p-4 sm:p-6 lg:p-8">
      <!-- Intestazione -->
      <header class="text-center mb-8">
        <h1 class="text-3xl sm:text-4xl font-bold text-gray-900">
          Gestionale Auto Aziendali
        </h1>
        <p class="mt-2 text-lg text-gray-600">
          Prenota un veicolo in modo semplice e veloce.
        </p>
        <div class="mt-4 text-xs text-gray-400">
          <span>ID Utente: </span><span id="userIdDisplay">...</span>
        </div>
      </header>

      <main class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Colonna Sinistra: Selezione Auto e Form -->
        <div class="lg:col-span-2">
          <!-- Sezione Selezione Auto -->
          <section>
            <h2 class="text-2xl font-semibold mb-4 text-gray-800">
              1. Seleziona un'auto
            </h2>
            <div
              id="car-list"
              class="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-6"
            >
              <!-- Le auto verranno inserite qui da JS -->
            </div>
          </section>

          <!-- Sezione Form di Prenotazione -->
          <section class="mt-8">
            <h2 class="text-2xl font-semibold mb-4 text-gray-800">
              2. Inserisci i dati
            </h2>
            <form
              id="booking-form"
              class="bg-white p-6 rounded-xl shadow-md border border-gray-200"
            >
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label
                    for="userName"
                    class="block text-sm font-medium text-gray-700 mb-1"
                    >Il tuo Nome</label
                  >
                  <input
                    type="text"
                    id="userName"
                    name="userName"
                    required
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
                  />
                </div>
                <div>
                  <label
                    for="bookingDate"
                    class="block text-sm font-medium text-gray-700 mb-1"
                    >Data di Prenotazione</label
                  >
                  <input
                    type="date"
                    id="bookingDate"
                    name="bookingDate"
                    required
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
                  />
                </div>
              </div>
              <div class="mt-6">
                <button
                  type="submit"
                  class="w-full bg-blue-600 text-white font-semibold py-3 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-transform transform hover:scale-105 flex items-center justify-center gap-2"
                >
                  <i class="ph-bold ph-check-circle text-xl"></i>
                  Conferma Prenotazione
                </button>
              </div>
              <p
                id="form-error"
                class="text-red-500 text-sm mt-4 text-center"
              ></p>
            </form>
          </section>
        </div>

        <!-- Colonna Destra: Elenco Prenotazioni -->
        <aside
          class="lg:col-span-1 bg-white p-6 rounded-xl shadow-md border border-gray-200"
        >
          <h2
            class="text-2xl font-semibold mb-4 text-gray-800 flex items-center gap-2"
          >
            <i class="ph-bold ph-calendar-check text-blue-600"></i>
            Prenotazioni Attive
          </h2>
          <div
            id="bookings-list"
            class="space-y-4 max-h-[600px] overflow-y-auto pr-2"
          >
            <!-- Le prenotazioni verranno inserite qui da JS -->
            <p id="no-bookings" class="text-gray-500 text-center py-8">
              Nessuna prenotazione per oggi o per il futuro.
            </p>
          </div>
        </aside>
      </main>
    </div>

    <!-- Modale di notifica -->
    <div
      id="notification-modal"
      class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50 p-4"
    >
      <div
        class="bg-white rounded-xl shadow-2xl p-8 text-center max-w-sm w-full transform transition-all scale-95 opacity-0"
      >
        <div id="modal-icon" class="mx-auto mb-4"></div>
        <h3 id="modal-title" class="text-2xl font-bold text-gray-900"></h3>
        <p id="modal-message" class="text-gray-600 mt-2"></p>
        <button
          id="modal-close"
          class="mt-6 bg-gray-200 text-gray-800 font-semibold py-2 px-6 rounded-lg hover:bg-gray-300 transition"
        >
          Chiudi
        </button>
      </div>
    </div>

    <!-- Modale di conferma cancellazione -->
    <div
      id="confirmation-modal"
      class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50 p-4"
    >
      <div
        class="bg-white rounded-xl shadow-2xl p-8 text-center max-w-sm w-full transform transition-all scale-95 opacity-0"
      >
        <div class="mx-auto mb-4">
          <i class="ph-bold ph-warning text-5xl text-yellow-500"></i>
        </div>
        <h3 id="confirmation-title" class="text-2xl font-bold text-gray-900">
          Sei sicuro?
        </h3>
        <p id="confirmation-message" class="text-gray-600 mt-2"></p>
        <div class="mt-6 flex justify-center gap-4">
          <button
            id="confirmation-cancel"
            class="bg-gray-200 text-gray-800 font-semibold py-2 px-6 rounded-lg hover:bg-gray-300 transition"
          >
            Annulla
          </button>
          <button
            id="confirmation-confirm"
            class="bg-red-600 text-white font-semibold py-2 px-6 rounded-lg hover:bg-red-700 transition"
          >
            Conferma
          </button>
        </div>
      </div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
      // Importa le funzioni necessarie dal Firebase SDK
      import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
      import {
        getAuth,
        signInAnonymously,
        signInWithCustomToken,
        onAuthStateChanged,
      } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
      import {
        getFirestore,
        collection,
        addDoc,
        onSnapshot,
        query,
        where,
        Timestamp,
        setLogLevel,
        doc,
        deleteDoc,
      } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

      // --- CONFIGURAZIONE ---
      // Lista delle auto aziendali. Puoi personalizzarla facilmente.
      const cars = [
        {
          id: "fiat500",
          name: "Fiat 500L",
          plate: "AA 123 BB",
          imageUrl: "https://placehold.co/400x300/e2e8f0/475569?text=Fiat+500L",
        },
        {
          id: "volkswagen",
          name: "Volkswagen Golf",
          plate: "CC 456 DD",
          imageUrl:
            "https://placehold.co/400x300/e2e8f0/475569?text=Volkswagen+Golf",
        },
        {
          id: "fiatpuntoCR",
          name: "Fiat Punto Crocerossa",
          plate: "CC 456 DD",
          imageUrl:
            "https://placehold.co/400x300/e2e8f0/475569?text=Punto+Croce+Rossa",
        },
        {
          id: "fiatpunto",
          name: "Fiat Punto",
          plate: "EE 789 FF",
          imageUrl:
            "https://placehold.co/400x300/e2e8f0/475569?text=Fiat+Punto",
        },
      ];

      // --- ELEMENTI DEL DOM ---
      const carListElement = document.getElementById("car-list");
      const bookingForm = document.getElementById("booking-form");
      const userNameInput = document.getElementById("userName");
      const bookingDateInput = document.getElementById("bookingDate");
      const bookingsListElement = document.getElementById("bookings-list");
      const formError = document.getElementById("form-error");
      const noBookingsMessage = document.getElementById("no-bookings");
      const userIdDisplay = document.getElementById("userIdDisplay");

      // Modale di notifica
      const notificationModal = document.getElementById("notification-modal");
      const notificationModalContent = notificationModal.querySelector("div");
      const modalIcon = document.getElementById("modal-icon");
      const modalTitle = document.getElementById("modal-title");
      const modalMessage = document.getElementById("modal-message");
      const modalClose = document.getElementById("modal-close");

      // Modale di conferma
      const confirmationModal = document.getElementById("confirmation-modal");
      const confirmationModalContent = confirmationModal.querySelector("div");
      const confirmationMessage = document.getElementById(
        "confirmation-message"
      );
      const confirmationCancelBtn = document.getElementById(
        "confirmation-cancel"
      );
      const confirmationConfirmBtn = document.getElementById(
        "confirmation-confirm"
      );

      // --- STATO DELL'APPLICAZIONE ---
      let selectedCarId = null;
      let db, auth, userId;
      let bookings = []; // Cache locale delle prenotazioni
      let appId = "default-car-booking";

      // --- INIZIALIZZAZIONE FIREBASE ---
      async function initializeFirebase() {
        setLogLevel("debug");
        const firebaseConfig =
          typeof __firebase_config !== "undefined"
            ? JSON.parse(__firebase_config)
            : undefined;
        appId = typeof __app_id !== "undefined" ? __app_id : appId;

        if (!firebaseConfig) {
          console.error("Configurazione Firebase non trovata.");
          showNotification(
            "Errore",
            "Configurazione del database non trovata. L'app non può funzionare.",
            "error"
          );
          return;
        }

        const app = initializeApp(firebaseConfig);
        db = getFirestore(app);
        auth = getAuth(app);

        onAuthStateChanged(auth, (user) => {
          if (user) {
            userId = user.uid;
            userIdDisplay.textContent = userId;
            console.log("Utente autenticato:", userId);
            listenForBookings();
          } else {
            console.log(
              "Nessun utente autenticato, tento l'accesso anonimo o con token."
            );
          }
        });

        try {
          if (
            typeof __initial_auth_token !== "undefined" &&
            __initial_auth_token
          ) {
            await signInWithCustomToken(auth, __initial_auth_token);
          } else {
            await signInAnonymously(auth);
          }
        } catch (error) {
          console.error("Errore durante l'autenticazione:", error);
          showNotification(
            "Errore di Autenticazione",
            "Impossibile connettersi al servizio. Riprova più tardi.",
            "error"
          );
        }
      }

      // --- FUNZIONI DI RENDERING ---

      function renderCarList() {
        carListElement.innerHTML = "";
        cars.forEach((car) => {
          const card = document.createElement("div");
          card.className =
            "car-card bg-white p-4 rounded-xl shadow-sm border border-gray-200 cursor-pointer hover:shadow-lg hover:-translate-y-1";
          card.dataset.carId = car.id;
          card.innerHTML = `
                    <img src="${car.imageUrl}" alt="Immagine di ${car.name}" class="w-full h-40 object-cover rounded-lg mb-4" onerror="this.onerror=null;this.src='https://placehold.co/400x300/e2e8f0/475569?text=Immagine+non+disponibile';">
                    <h3 class="font-bold text-lg">${car.name}</h3>
                    <p class="text-sm text-gray-500">Targa: ${car.plate}</p>
                `;
          card.addEventListener("click", () => handleCarSelection(car.id));
          carListElement.appendChild(card);
        });
      }

      function renderBookings() {
        bookingsListElement.innerHTML = "";
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const futureBookings = bookings.filter(
          (b) => b.bookingDate.toDate() >= today
        );
        futureBookings.sort(
          (a, b) => a.bookingDate.toMillis() - b.bookingDate.toMillis()
        );

        if (futureBookings.length === 0) {
          bookingsListElement.appendChild(noBookingsMessage);
          noBookingsMessage.style.display = "block";
        } else {
          noBookingsMessage.style.display = "none";
          futureBookings.forEach((booking) => {
            const car = cars.find((c) => c.id === booking.carId);
            const bookingDate = booking.bookingDate
              .toDate()
              .toLocaleDateString("it-IT", {
                day: "2-digit",
                month: "long",
                year: "numeric",
              });

            const bookingElement = document.createElement("div");
            bookingElement.className =
              "p-4 rounded-lg border border-gray-200 bg-gray-50 flex justify-between items-center";

            let deleteButtonHTML = "";
            // Mostra il pulsante di cancellazione solo se l'utente corrente ha creato la prenotazione
            if (booking.createdBy === userId) {
              const bookingInfo = `${
                car ? car.name : "Auto"
              } il ${bookingDate}`;
              deleteButtonHTML = `<button class="delete-btn" data-booking-id="${booking.id}" data-booking-info="${bookingInfo}" title="Cancella prenotazione"><i class="ph-bold ph-trash text-xl"></i></button>`;
            }

            bookingElement.innerHTML = `
                        <div>
                            <p class="font-semibold text-gray-800">${
                              booking.userName
                            }</p>
                            <p class="text-sm text-gray-600">ha prenotato <span class="font-medium">${
                              car ? car.name : "Auto sconosciuta"
                            }</span></p>
                            <p class="text-sm text-blue-600 font-medium mt-1 flex items-center gap-1">
                                <i class="ph-fill ph-calendar"></i>
                                ${bookingDate}
                            </p>
                        </div>
                        ${deleteButtonHTML}
                    `;
            bookingsListElement.appendChild(bookingElement);
          });

          // Aggiunge gli event listener ai nuovi pulsanti di cancellazione
          document.querySelectorAll(".delete-btn").forEach((button) => {
            button.addEventListener("click", handleDeleteClick);
          });
        }
        updateCarAvailability();
      }

      function updateCarAvailability() {
        const selectedDateStr = bookingDateInput.value;
        if (!selectedDateStr) return;
        const selectedDate = new Date(selectedDateStr);
        selectedDate.setHours(0, 0, 0, 0);

        const bookedCarIdsOnDate = bookings
          .filter((b) => {
            const bookingDate = b.bookingDate.toDate();
            bookingDate.setHours(0, 0, 0, 0);
            return bookingDate.getTime() === selectedDate.getTime();
          })
          .map((b) => b.carId);

        document.querySelectorAll(".car-card").forEach((card) => {
          const carId = card.dataset.carId;
          if (bookedCarIdsOnDate.includes(carId)) {
            card.classList.add("opacity-40", "cursor-not-allowed");
            card.classList.remove("hover:shadow-lg", "hover:-translate-y-1");
            card.title = "Questa auto è già prenotata per la data selezionata.";
          } else {
            card.classList.remove("opacity-40", "cursor-not-allowed");
            card.classList.add("hover:shadow-lg", "hover:-translate-y-1");
            card.title = "";
          }
        });
      }

      // --- GESTIONE EVENTI ---

      function handleCarSelection(carId) {
        const card = document.querySelector(
          `.car-card[data-car-id="${carId}"]`
        );
        if (card.classList.contains("opacity-40")) {
          showNotification(
            "Non disponibile",
            "Questa auto è già prenotata per la data selezionata. Scegline un'altra o cambia data.",
            "warning"
          );
          return;
        }
        selectedCarId = carId;
        document
          .querySelectorAll(".car-card")
          .forEach((c) => c.classList.remove("selected"));
        card.classList.add("selected");
        formError.textContent = "";
      }

      async function handleFormSubmit(event) {
        event.preventDefault();
        formError.textContent = "";
        const userName = userNameInput.value.trim();
        const bookingDateStr = bookingDateInput.value;

        if (!selectedCarId || !userName || !bookingDateStr) {
          formError.textContent = "Per favore, compila tutti i campi.";
          return;
        }
        const bookingDate = new Date(bookingDateStr);
        bookingDate.setHours(0, 0, 0, 0);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        if (bookingDate < today) {
          formError.textContent = "Non puoi prenotare per una data passata.";
          return;
        }

        const isAlreadyBooked = bookings.some((b) => {
          const existingBookingDate = b.bookingDate.toDate();
          existingBookingDate.setHours(0, 0, 0, 0);
          return (
            b.carId === selectedCarId &&
            existingBookingDate.getTime() === bookingDate.getTime()
          );
        });

        if (isAlreadyBooked) {
          formError.textContent =
            "Questa auto è già prenotata per la data selezionata.";
          showNotification(
            "Prenotazione Fallita",
            "L'auto non è disponibile nella data scelta.",
            "error"
          );
          return;
        }

        try {
          const bookingsCollection = collection(
            db,
            `artifacts/${appId}/public/data/bookings`
          );
          const newBooking = {
            carId: selectedCarId,
            userName: userName,
            bookingDate: Timestamp.fromDate(bookingDate),
            createdAt: Timestamp.now(),
            createdBy: userId,
          };
          await addDoc(bookingsCollection, newBooking);

          showNotification(
            "Successo!",
            "La tua prenotazione è stata confermata.",
            "success"
          );
          sendBookingConfirmationEmail(newBooking);

          bookingForm.reset();
          selectedCarId = null;
          document
            .querySelectorAll(".car-card")
            .forEach((c) => c.classList.remove("selected"));
          updateCarAvailability();
        } catch (error) {
          console.error(
            "Errore durante il salvataggio della prenotazione: ",
            error
          );
          formError.textContent = "Si è verificato un errore. Riprova.";
          showNotification(
            "Errore",
            "Impossibile salvare la prenotazione. Controlla la connessione e riprova.",
            "error"
          );
        }
      }

      function handleDeleteClick(event) {
        const button = event.currentTarget;
        const bookingId = button.dataset.bookingId;
        const bookingInfo = button.dataset.bookingInfo;

        showConfirmationModal(
          `Vuoi davvero cancellare la prenotazione per ${bookingInfo}?`,
          async () => {
            try {
              const docRef = doc(
                db,
                `artifacts/${appId}/public/data/bookings`,
                bookingId
              );
              await deleteDoc(docRef);
              showNotification(
                "Cancellata!",
                "La prenotazione è stata cancellata con successo.",
                "success"
              );
            } catch (error) {
              console.error("Errore durante la cancellazione:", error);
              showNotification(
                "Errore",
                "Impossibile cancellare la prenotazione.",
                "error"
              );
            }
          }
        );
      }

      // --- LISTENER FIRESTORE ---

      function listenForBookings() {
        const bookingsCollection = collection(
          db,
          `artifacts/${appId}/public/data/bookings`
        );
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const q = query(
          bookingsCollection,
          where("bookingDate", ">=", Timestamp.fromDate(today))
        );

        onSnapshot(
          q,
          (snapshot) => {
            bookings = snapshot.docs.map((doc) => ({
              id: doc.id,
              ...doc.data(),
            }));
            console.log("Dati prenotazioni ricevuti:", bookings.length);
            renderBookings();
          },
          (error) => {
            console.error("Errore nell'ascolto delle prenotazioni:", error);
            showNotification(
              "Errore di Connessione",
              "Impossibile caricare le prenotazioni in tempo reale.",
              "error"
            );
          }
        );
      }

      // --- FUNZIONE SIMULAZIONE EMAIL ---
      function sendBookingConfirmationEmail(bookingDetails) {
        const car = cars.find((c) => c.id === bookingDetails.carId);
        const date = bookingDetails.bookingDate
          .toDate()
          .toLocaleDateString("it-IT");

        console.log("--- SIMULAZIONE INVIO EMAIL ---");
        console.log(`A: ${bookingDetails.userName}`);
        console.log("Oggetto: Conferma Prenotazione Auto Aziendale");
        console.log("---");
        console.log(`Ciao ${bookingDetails.userName},`);
        console.log(
          `La tua prenotazione per ${car.name} per il giorno ${date} è stata confermata.`
        );
        console.log("--- FINE SIMULAZIONE ---");
        // NOTA: In un'applicazione reale, questa funzione dovrebbe fare una chiamata
        // a un endpoint di backend (es. una Firebase Cloud Function) che si occupa
        // di inviare l'email in modo sicuro tramite un servizio come SendGrid o Mailgun.
      }

      // --- FUNZIONI UTILITY (MODALI) ---
      function showNotification(title, message, type = "success") {
        modalTitle.textContent = title;
        modalMessage.textContent = message;

        modalIcon.innerHTML = "";
        let iconElement;
        if (type === "success")
          iconElement =
            '<i class="ph-bold ph-check-circle text-5xl text-green-500"></i>';
        else if (type === "error")
          iconElement =
            '<i class="ph-bold ph-x-circle text-5xl text-red-500"></i>';
        else if (type === "warning")
          iconElement =
            '<i class="ph-bold ph-warning-circle text-5xl text-yellow-500"></i>';
        if (iconElement) modalIcon.innerHTML = iconElement;

        notificationModal.classList.remove("hidden");
        setTimeout(() => {
          notificationModalContent.classList.remove("scale-95", "opacity-0");
        }, 10);
      }

      function hideNotification() {
        notificationModalContent.classList.add("scale-95", "opacity-0");
        setTimeout(() => {
          notificationModal.classList.add("hidden");
        }, 200);
      }

      function showConfirmationModal(message, onConfirm) {
        confirmationMessage.textContent = message;

        // Per evitare listener multipli, cloniamo e rimpiazziamo il bottone
        const newConfirmBtn = confirmationConfirmBtn.cloneNode(true);
        confirmationConfirmBtn.parentNode.replaceChild(
          newConfirmBtn,
          confirmationConfirmBtn
        );

        newConfirmBtn.addEventListener("click", () => {
          hideConfirmationModal();
          onConfirm();
        });

        confirmationModal.classList.remove("hidden");
        setTimeout(() => {
          confirmationModalContent.classList.remove("scale-95", "opacity-0");
        }, 10);
      }

      function hideConfirmationModal() {
        confirmationModalContent.classList.add("scale-95", "opacity-0");
        setTimeout(() => {
          confirmationModal.classList.add("hidden");
        }, 200);
      }

      modalClose.addEventListener("click", hideNotification);
      confirmationCancelBtn.addEventListener("click", hideConfirmationModal);

      // --- INIZIO ESECUZIONE ---
      document.addEventListener("DOMContentLoaded", () => {
        const today = new Date().toISOString().split("T")[0];
        bookingDateInput.setAttribute("min", today);
        bookingDateInput.addEventListener("change", updateCarAvailability);
        renderCarList();
        initializeFirebase();
        bookingForm.addEventListener("submit", handleFormSubmit);
      });
    </script>
  </body>
</html>
